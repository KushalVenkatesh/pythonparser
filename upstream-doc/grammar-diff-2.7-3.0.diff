--- 2.7	2015-04-03 11:08:49.663443774 +0300
+++ 3.0	2015-04-03 11:09:02.483479332 +0300
@@ -25,7 +25,10 @@
-funcdef: 'def' NAME parameters ':' suite
-parameters: '(' [varargslist] ')'
-varargslist: ((fpdef ['=' test] ',')*
-              ('*' NAME [',' '**' NAME] | '**' NAME) |
-              fpdef ['=' test] (',' fpdef ['=' test])* [','])
-fpdef: NAME | '(' fplist ')'
-fplist: fpdef (',' fpdef)* [',']
+funcdef: 'def' NAME parameters ['->' test] ':' suite
+parameters: '(' [typedargslist] ')'
+typedargslist: ((tfpdef ['=' test] ',')*
+                ('*' [tfpdef] (',' tfpdef ['=' test])* [',' '**' tfpdef] | '**' tfpdef)
+                | tfpdef ['=' test] (',' tfpdef ['=' test])* [','])
+tfpdef: NAME [':' test]
+varargslist: ((vfpdef ['=' test] ',')*
+              ('*' [vfpdef] (',' vfpdef ['=' test])*  [',' '**' vfpdef] | '**' vfpdef)
+              | vfpdef ['=' test] (',' vfpdef ['=' test])* [','])
+vfpdef: NAME
@@ -35,2 +38,2 @@
-small_stmt: (expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt |
-             import_stmt | global_stmt | exec_stmt | assert_stmt)
+small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |
+             import_stmt | global_stmt | nonlocal_stmt | assert_stmt)
@@ -42,2 +44,0 @@
-print_stmt: 'print' ( [ test (',' test)* [','] ] |
-                      '>>' test [ (',' test)+ [','] ] )
@@ -51 +52 @@
-raise_stmt: 'raise' [test [',' test [',' test]]]
+raise_stmt: 'raise' [test ['from' test]]
@@ -54 +55,2 @@
-import_from: ('from' ('.'* dotted_name | '.'+)
+# note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
+import_from: ('from' (('.' | '...')* dotted_name | ('.' | '...')+)
@@ -62 +64 @@
-exec_stmt: 'exec' expr ['in' test [',' test]]
+nonlocal_stmt: 'nonlocal' NAME (',' NAME)*
@@ -71,5 +73,5 @@
-with_stmt: 'with' with_item (',' with_item)*  ':' suite
-with_item: test ['as' expr]
+with_stmt: 'with' test [ with_var ] ':' suite
+with_var: 'as' expr
@@ -77 +79 @@
-except_clause: 'except' [test [('as' | ',') test]]
+except_clause: 'except' [test ['as' NAME]]
@@ -80,9 +81,0 @@
-# Backward compatibility cruft to support:
-# [ x for x in lambda: True, lambda: False if x() ]
-# even while also allowing:
-# lambda x: 5 if x else 2
-# (But not a mix of the two)
-testlist_safe: old_test [(',' old_test)+ [',']]
-old_test: or_test | old_lambdef
-old_lambdef: 'lambda' [varargslist] ':' old_test
-
@@ -89,0 +83,3 @@
+test_nocond: or_test | lambdef_nocond
+lambdef: 'lambda' [varargslist] ':' test
+lambdef_nocond: 'lambda' [varargslist] ':' test_nocond
@@ -93,2 +89,3 @@
-comparison: expr (comp_op expr)*
-comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'
+comparison: star_expr (comp_op star_expr)*
+comp_op: '<'|'>'|'=='|'>='|'<='|'!='|'in'|'not' 'in'|'is'|'is' 'not'
+star_expr: ['*'] expr
@@ -104 +101 @@
-       '[' [listmaker] ']' |
+       '[' [testlist_comp] ']' |
@@ -106,3 +103 @@
-       '`' testlist1 '`' |
-       NAME | NUMBER | STRING+)
-listmaker: test ( list_for | (',' test)* [','] )
+       NAME | NUMBER | STRING+ | '...' | 'None' | 'True' | 'False')
@@ -110 +104,0 @@
-lambdef: 'lambda' [varargslist] ':' test
@@ -113 +107 @@
-subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
+subscript: test | [test] ':' [test] [sliceop]
@@ -115 +109 @@
-exprlist: expr (',' expr)* [',']
+exprlist: star_expr (',' star_expr)* [',']
@@ -120 +114 @@
-classdef: 'class' NAME ['(' [testlist] ')'] ':' suite
+classdef: 'class' NAME ['(' [arglist] ')'] ':' suite
@@ -125,7 +119 @@
-# The reason that keywords are test nodes instead of NAME is that using NAME
-# results in an ambiguity. ast.c makes sure it's a NAME.
-argument: test [comp_for] | test '=' test
-
-list_iter: list_for | list_if
-list_for: 'for' exprlist 'in' testlist_safe [list_iter]
-list_if: 'if' old_test [list_iter]
+argument: test [comp_for] | test '=' test  # Really [keyword '='] test
@@ -135 +123 @@
-comp_if: 'if' old_test [comp_iter]
+comp_if: 'if' test_nocond [comp_iter]
