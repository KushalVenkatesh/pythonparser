--- 2.7	2015-04-03 10:54:38.481072544 +0300
+++ 3.0	2015-04-03 10:46:36.623702436 +0300
@@ -4 +4 @@
-Python uses the 7-bit ASCII character set for program text.
+Python reads program text as Unicode code points; the encoding of a source file can be given by an encoding declaration and defaults to UTF-8, see PEP 3120 for details. If the source file cannot be decoded, a SyntaxError is raised.
@@ -6,7 +6 @@
-New in version 2.3: An encoding declaration can be used to indicate that string literals and comments use an encoding different from ASCII.
-
-For compatibility with older versions, Python only warns if it finds 8-bit characters; those warnings should be corrected by either declaring an explicit encoding, or using escape sequences if those bytes are binary data, instead of characters.
-
-The run-time character set depends on the I/O devices connected to the program but is generally a superset of ASCII.
-
-Future compatibility note: It may be tempting to assume that the character set for 8-bit characters is ISO Latin-1 (an ASCII superset that covers most western languages that use the Latin alphabet), but it is possible that in the future Unicode text editors will become common. These generally use the UTF-8 encoding, which is also an ASCII superset, but with very different use for the characters with ordinals 128-255. While there is no consensus on this subject yet, it is unwise to assume either Latin-1 or UTF-8, even though the current implementation appears to favor Latin-1. This applies both to the source character set and the run-time character set.
-
@@ -35 +27,3 @@
-which is recognized by Bram Moolenaar’s VIM. In addition, if the first bytes of the file are the UTF-8 byte-order mark ('\xef\xbb\xbf'), the declared file encoding is UTF-8 (this is supported, among others, by Microsoft’s notepad).
+which is recognized by Bram Moolenaar’s VIM.
+
+If no encoding declaration is found, the default encoding is UTF-8. In addition, if the first bytes of the file are the UTF-8 byte-order mark (b'\xef\xbb\xbf'), the declared file encoding is UTF-8 (this is supported, among others, by Microsoft’s notepad).
@@ -37 +31 @@
-If an encoding is declared, the encoding name must be recognized by Python. The encoding is used for all lexical analysis, in particular to find the end of a string, and to interpret the contents of Unicode literals. String literals are converted to Unicode for syntactical analysis, then converted back to their original encoding before interpretation starts. The encoding declaration must appear on a line of its own.
+If an encoding is declared, the encoding name must be recognized by Python. The encoding is used for all lexical analysis, including string literals, comments and identifiers. The encoding declaration must appear on a line of its own.
@@ -57,2 +51,2 @@
-2.1.7. Blank lines
-A logical line that contains only spaces, tabs, formfeeds and possibly a comment, is ignored (i.e., no NEWLINE token is generated). During interactive input of statements, handling of a blank line may differ depending on the implementation of the read-eval-print loop. In the standard implementation, an entirely blank logical line (i.e. one containing not even whitespace or a comment) terminates a multi-line statement.
+Blank lines
+A logical line that contains only spaces, tabs, formfeeds and possibly a comment, is ignored (i.e., no NEWLINE token is generated). During interactive input of statements, handling of a blank line may differ depending on the implementation of the read-eval-print loop. In the standard interactive interpreter, an entirely blank logical line (i.e. one containing not even whitespace or a comment) terminates a multi-line statement.
@@ -63 +57,3 @@
-First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight (this is intended to be the same rule as used by Unix). The total number of spaces preceding the first non-blank character then determines the line’s indentation. Indentation cannot be split over multiple physical lines using backslashes; the whitespace up to the first backslash determines the indentation.
+Tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight (this is intended to be the same rule as used by Unix). The total number of spaces preceding the first non-blank character then determines the line’s indentation. Indentation cannot be split over multiple physical lines using backslashes; the whitespace up to the first backslash determines the indentation.
+
+Indentation is rejected as inconsistent if a source file mixes tabs and spaces in a way that makes the meaning dependent on the worth of a tab in spaces; a TabError is raised in that case.
@@ -103,1 +99,1 @@
-Identifiers (also referred to as names) are described by the following lexical definitions:
+Identifiers (also referred to as names) are described by the following lexical definitions.
@@ -106,6 +102 @@
-identifier ::=  (letter|"_") (letter | digit | "_")*
-letter     ::=  lowercase | uppercase
-lowercase  ::=  "a"..."z"
-uppercase  ::=  "A"..."Z"
-digit      ::=  "0"..."9"
-Identifiers are unlimited in length. Case is significant.
+The syntax of identifiers in Python is based on the Unicode standard annex UAX-31, with elaboration and changes as defined below; see also PEP 3131 for further details.
@@ -113,2 +104,3 @@
-2.3.1. Keywords
-The following identifiers are used as reserved words, or keywords of the language, and cannot be used as ordinary identifiers. They must be spelled exactly as written here:
+Within the ASCII range (U+0001..U+007F), the valid characters for identifiers are the same as in Python 2.x: the uppercase and lowercase letters A through Z, the underscore _ and, except for the first character, the digits 0 through 9.
+
+Python 3.0 introduces additional characters from outside the ASCII range (see PEP 3131). For these characters, the classification uses the version of the Unicode Character Database as included in the unicodedata module.
@@ -116,8 +108,18 @@
-and       del       from      not       while
-as        elif      global    or        with
-assert    else      if        pass      yield
-break     except    import    print
-class     exec      in        raise
-continue  finally   is        return
-def       for       lambda    try
-Changed in version 2.4: None became a constant and is now recognized by the compiler as a name for the built-in object None. Although it is not a keyword, you cannot assign a different object to it.
+Identifiers are unlimited in length. Case is significant.
+
+identifier  ::=  id_start id_continue*
+id_start    ::=  <all characters in general categories Lu, Ll, Lt, Lm, Lo, Nl, the underscore, and characters with the Other_ID_Start property>
+id_continue ::=  <all characters in id_start, plus characters in the categories Mn, Mc, Nd, Pc and others with the Other_ID_Continue property>
+The Unicode category codes mentioned above stand for:
+
+Lu - uppercase letters
+Ll - lowercase letters
+Lt - titlecase letters
+Lm - modifier letters
+Lo - other letters
+Nl - letter numbers
+Mn - nonspacing marks
+Mc - spacing combining marks
+Nd - decimal numbers
+Pc - connector punctuations
+All identifiers are converted into the normal form NFC while parsing; comparison of identifiers is based on NFC.
@@ -125 +127 @@
-Changed in version 2.5: Using as and with as identifiers triggers a warning. To use them as keywords, enable the with_statement future feature .
+A non-normative HTML file listing all valid identifier characters for Unicode 4.1 can be found at http://www.dcl.hpi.uni-potsdam.de/home/loewis/table-3131.html.
@@ -127 +129,2 @@
-Changed in version 2.6: as and with are full keywords.
+Keywords
+The following identifiers are used as reserved words, or keywords of the language, and cannot be used as ordinary identifiers. They must be spelled exactly as written here:
@@ -129,0 +132,7 @@
+False      class      finally    is         return
+None       continue   for        lambda     try
+True       def        from       nonlocal   while
+and        del        global     not        with
+as         elif       if         or         yield
+assert     else       import     pass
+break      except     in         raise
@@ -133 +143 @@
-Not imported by from module import *. The special identifier _ is used in the interactive interpreter to store the result of the last evaluation; it is stored in the __builtin__ module. When not in interactive mode, _ has no special meaning and is not defined. See section The import statement.
+Not imported by from module import *. The special identifier _ is used in the interactive interpreter to store the result of the last evaluation; it is stored in the builtins module. When not in interactive mode, _ has no special meaning and is not defined. See section The import statement.
@@ -137 +147 @@
-System-defined names. These names are defined by the interpreter and its implementation (including the standard library). Current system names are discussed in the Special method names section and elsewhere. More will likely be defined in future versions of Python. Any use of __*__ names, in any context, that does not follow explicitly documented use, is subject to breakage without warning.
+System-defined names. These names are defined by the interpreter and its implementation (including the standard library); applications should not expect to define additional names using this convention. The set of names of this class defined by Python may be extended in future versions. See section Special method names.
@@ -147,2 +157 @@
-stringprefix    ::=  "r" | "u" | "ur" | "R" | "U" | "UR" | "Ur" | "uR"
-                     | "b" | "B" | "br" | "Br" | "bR" | "BR"
+stringprefix    ::=  "r" | "R"
@@ -150,4 +159,3 @@
-longstring      ::=  "'''" longstringitem* "'''"
-                     | '"""' longstringitem* '"""'
-shortstringitem ::=  shortstringchar | escapeseq
-longstringitem  ::=  longstringchar | escapeseq
+longstring      ::=  "'''" longstringitem* "'''" | '"""' longstringitem* '"""'
+shortstringitem ::=  shortstringchar | stringescapeseq
+longstringitem  ::=  longstringchar | stringescapeseq
@@ -156,2 +164,11 @@
-escapeseq       ::=  "\" <any ASCII character>
-One syntactic restriction not indicated by these productions is that whitespace is not allowed between the stringprefix and the rest of the string literal. The source character set is defined by the encoding declaration; it is ASCII if no encoding declaration is given in the source file; see section Encoding declarations.
+stringescapeseq ::=  "\" <any source character>
+bytesliteral   ::=  bytesprefix(shortbytes | longbytes)
+bytesprefix    ::=  "b" | "B"
+shortbytes     ::=  "'" shortbytesitem* "'" | '"' shortbytesitem* '"'
+longbytes      ::=  "'''" longbytesitem* "'''" | '"""' longbytesitem* '"""'
+shortbytesitem ::=  shortbyteschar | bytesescapeseq
+longbytesitem  ::=  longbyteschar | bytesescapeseq
+shortbyteschar ::=  <any ASCII character except "\" or newline or the quote>
+longbyteschar  ::=  <any ASCII character except "\">
+bytesescapeseq ::=  "\" <any ASCII character>
+One syntactic restriction not indicated by these productions is that whitespace is not allowed between the stringprefix or bytesprefix and the rest of the literal. The source character set is defined by the encoding declaration; it is UTF-8 if no encoding declaration is given in the source file; see section Encoding declarations.
@@ -159 +176,5 @@
-In plain English: String literals can be enclosed in matching single quotes (') or double quotes ("). They can also be enclosed in matching groups of three single or double quotes (these are generally referred to as triple-quoted strings). The backslash (\) character is used to escape characters that otherwise have a special meaning, such as newline, backslash itself, or the quote character. String literals may optionally be prefixed with a letter 'r' or 'R'; such strings are called raw strings and use different rules for interpreting backslash escape sequences. A prefix of 'u' or 'U' makes the string a Unicode string. Unicode strings use the Unicode character set as defined by the Unicode Consortium and ISO 10646. Some additional escape sequences, described below, are available in Unicode strings. A prefix of 'b' or 'B' is ignored in Python 2; it indicates that the literal should become a bytes literal in Python 3 (e.g. when code is automatically converted with 2to3). A 'u' or 'b' prefix may be followed by an 'r' prefix.
+In plain English: Both types of literals can be enclosed in matching single quotes (') or double quotes ("). They can also be enclosed in matching groups of three single or double quotes (these are generally referred to as triple-quoted strings). The backslash (\) character is used to escape characters that otherwise have a special meaning, such as newline, backslash itself, or the quote character.
+
+String literals may optionally be prefixed with a letter 'r' or 'R'; such strings are called raw strings and treat backslashes as literal characters. As a result, '\U' and '\u' escapes in raw strings are not treated specially.
+
+Bytes literals are always prefixed with 'b' or 'B'; they produce an instance of the bytes type instead of the str type. They may only contain ASCII characters; bytes with a numeric value of 128 or greater must be expressed with escapes.
@@ -166 +187 @@
-\newline	Ignored	 
+\newline	Backslash and newline ignored	 
@@ -174 +194,0 @@
-\N{name}	Character named name in the Unicode database (Unicode only)	 
@@ -177,2 +196,0 @@
-\uxxxx	Character with 16-bit hex value xxxx (Unicode only)	(1)
-\Uxxxxxxxx	Character with 32-bit hex value xxxxxxxx (Unicode only)	(2)
@@ -180,2 +198,8 @@
-\ooo	Character with octal value ooo	(3,5)
-\xhh	Character with hex value hh	(4,5)
+\ooo	Character with octal value ooo	(1,3)
+\xhh	Character with hex value hh	(2,3)
+Escape sequences only recognized in string literals are:
+
+Escape Sequence	Meaning	Notes
+\N{name}	Character named name in the Unicode database	 
+\uxxxx	Character with 16-bit hex value xxxx	(4)
+\Uxxxxxxxx	Character with 32-bit hex value xxxxxxxx	(5)
@@ -184,2 +207,0 @@
-Individual code units which form parts of a surrogate pair can be encoded using this escape sequence.
-Any Unicode character can be encoded this way, but characters outside the Basic Multilingual Plane (BMP) will be encoded using a surrogate pair if Python is compiled to use 16-bit code units (the default).
@@ -187,5 +209,5 @@
-Unlike in Standard C, exactly two hex digits are required.
-In a string literal, hexadecimal and octal escapes denote the byte with the given value; it is not necessary that the byte encodes a character in the source character set. In a Unicode literal, these escapes denote a Unicode character with the given value.
-Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., the backslash is left in the string. (This behavior is useful when debugging: if an escape sequence is mistyped, the resulting output is more easily recognized as broken.) It is also important to note that the escape sequences marked as “(Unicode only)” in the table above fall into the category of unrecognized escapes for non-Unicode string literals.
-
-When an 'r' or 'R' prefix is present, a character following a backslash is included in the string without change, and all backslashes are left in the string. For example, the string literal r"\n" consists of two characters: a backslash and a lowercase 'n'. String quotes can be escaped with a backslash, but the backslash remains in the string; for example, r"\"" is a valid string literal consisting of two characters: a backslash and a double quote; r"\" is not a valid string literal (even a raw string cannot end in an odd number of backslashes). Specifically, a raw string cannot end in a single backslash (since the backslash would escape the following quote character). Note also that a single backslash followed by a newline is interpreted as those two characters as part of the string, not as a line continuation.
+Unlike in Standard C, at most two hex digits are accepted.
+In a bytes literal, hexadecimal and octal escapes denote the byte with the given value. In a string literal, these escapes denote a Unicode character with the given value.
+Individual code units which form parts of a surrogate pair can be encoded using this escape sequence. Unlike in Standard C, exactly two hex digits are required.
+Any Unicode character can be encoded this way, but characters outside the Basic Multilingual Plane (BMP) will be encoded using a surrogate pair if Python is compiled to use 16-bit code units (the default). Individual code units which form parts of a surrogate pair can be encoded using this escape sequence.
+Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., the backslash is left in the string. (This behavior is useful when debugging: if an escape sequence is mistyped, the resulting output is more easily recognized as broken.) It is also important to note that the escape sequences only recognized in string literals fall into the category of unrecognized escapes for bytes literals.
@@ -193 +215 @@
-When an 'r' or 'R' prefix is used in conjunction with a 'u' or 'U' prefix, then the \uXXXX and \UXXXXXXXX escape sequences are processed while all other backslashes are left in the string. For example, the string literal ur"\u0062\n" consists of three Unicode characters: ‘LATIN SMALL LETTER B’, ‘REVERSE SOLIDUS’, and ‘LATIN SMALL LETTER N’. Backslashes can be escaped with a preceding backslash; however, both remain in the string. As a result, \uXXXX escape sequences are only recognized when there are an odd number of backslashes.
+Even in a raw string, string quotes can be escaped with a backslash, but the backslash remains in the string; for example, r"\"" is a valid string literal consisting of two characters: a backslash and a double quote; r"\" is not a valid string literal (even a raw string cannot end in an odd number of backslashes). Specifically, a raw string cannot end in a single backslash (since the backslash would escape the following quote character). Note also that a single backslash followed by a newline is interpreted as those two characters as part of the string, not as a line continuation.
@@ -203,1 +225,1 @@
-There are four types of numeric literals: plain integers, long integers, floating point numbers, and imaginary numbers. There are no complex literals (complex numbers can be formed by adding a real number and an imaginary number).
+There are three types of numeric literals: integers, floating point numbers, and imaginary numbers. There are no complex literals (complex numbers can be formed by adding a real number and an imaginary number).
@@ -208,1 +230,1 @@
-Integer and long integer literals are described by the following lexical definitions:
+Integer literals are described by the following lexical definitions:
@@ -211 +232,0 @@
-longinteger    ::=  integer ("l" | "L")
@@ -213,2 +234,4 @@
-decimalinteger ::=  nonzerodigit digit* | "0"
-octinteger     ::=  "0" ("o" | "O") octdigit+ | "0" octdigit+
+decimalinteger ::=  nonzerodigit digit* | "0"+
+nonzerodigit   ::=  "1"..."9"
+digit          ::=  "0"..."9"
+octinteger     ::=  "0" ("o" | "O") octdigit+
@@ -217 +239,0 @@
-nonzerodigit   ::=  "1"..."9"
@@ -219 +240,0 @@
-bindigit       ::=  "0" | "1"
@@ -221 +242,2 @@
-Although both lower case 'l' and upper case 'L' are allowed as suffix for long integers, it is strongly recommended to always use 'L', since the letter 'l' looks too much like the digit '1'.
+bindigit       ::=  "0" | "1"
+There is no limit for the length of integer literals apart from what can be stored in available memory.
@@ -223 +245 @@
-Plain integer literals that are above the largest representable plain integer (e.g., 2147483647 when using 32-bit arithmetic) are accepted as if they were long integers instead. [1] There is no limit for long integer literals apart from what can be stored in available memory.
+Note that leading zeros in a non-zero decimal number are not allowed. This is for disambiguation with C-style octal literals, which Python used before version 3.0.
@@ -225 +247 @@
-Some examples of plain integer literals (first row) and long integer literals (second and third rows):
+Some examples of integer literals:
@@ -227,4 +249,4 @@
-7     2147483647                        0177
-3L    79228162514264337593543950336L    0377L   0x100000000L
-      79228162514264337593543950336             0xdeadbeef
-2.4.5. Floating point literals
+7     2147483647                        0o177    0b100110111
+3     79228162514264337593543950336     0o377    0x100000000
+      79228162514264337593543950336              0xdeadbeef
+Floating point literals
@@ -239 +261 @@
-Note that the integer and exponent parts of floating point numbers can look like octal integers, but are interpreted using radix 10. For example, 077e010 is legal, and denotes the same number as 77e10. The allowed range of floating point literals is implementation-dependent. Some examples of floating point literals:
+Note that the integer and exponent parts are always interpreted using radix 10. For example, 077e010 is legal, and denotes the same number as 77e10. The allowed range of floating point literals is implementation-dependent. Some examples of floating point literals:
@@ -256,4 +278,2 @@
-<       >       <=      >=      ==      !=      <>
-The comparison operators <> and != are alternate spellings of the same operator. != is the preferred spelling; <> is obsolescent.
-
-2.6. Delimiters
+<       >       <=      >=      ==      !=
+Delimiters
@@ -262,2 +282,2 @@
-(       )       [       ]       {       }      @
-,       :       .       `       =       ;
+(       )       [       ]       {       }
+,       :       .       ;       @       =
@@ -266 +286 @@
-The period can also occur in floating-point and imaginary literals. A sequence of three periods has a special meaning as an ellipsis in slices. The second half of the list, the augmented assignment operators, serve lexically as delimiters, but also perform an operation.
+The period can also occur in floating-point and imaginary literals. A sequence of three periods has a special meaning as an ellipsis literal. The second half of the list, the augmented assignment operators, serve lexically as delimiters, but also perform an operation.
@@ -274,3 +293,0 @@
-Footnotes
-
-[1]	In versions of Python prior to 2.4, octal and hexadecimal literals in the range just above the largest representable plain integer but below the largest unsigned 32-bit number (on a machine using 32-bit arithmetic), 4294967296, were taken as the negative plain integer obtained by subtracting 4294967296 from their unsigned value.
